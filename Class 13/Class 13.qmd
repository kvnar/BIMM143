---
title: "Class 13: Transcriptomics and the analysis of RNA-Seq data"
author: "Kevyn Aguilar Ramirez (PID: A16321291)"
format: pdf
editor: visual
---

In today's class we will explore and analyze 

##Data Import

We have two input files, 
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)

head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
dim(counts)
```
> This dataaet has 38694 genes

> Q2. How many ‘control’ cell lines do we have

```{r}
sum(metadata$dex == "control")
```
> There are 4 'control' cell lines

## Data Explore

Time to do some analysis.

We have 4 control and 4 treated samples/experiments/columns

Make sure the metadata id column matches the columns in our count data.
```{r}
colnames(counts)
```

```{r}
colnames(counts) == metadata$id
```

To check that all elements of a vector are TRUE, we can use the `all()` function.
```{r}
all(c(T,T,T,F))
```

```{r}
all(colnames(counts) == metadata$id)
```

To start I will calculate the `control.mean` and `treated.mean` values and compare them.

- Identify and extract the `control` only columns
- Determine the mean valus for each genes (i.e. row)
- Do the same for `treated`

```{r}
# Where does it tell me which columns are control?
control.inds <- metadata$dex == "control"
control.counts <- counts[, control.inds]
control.mean <- apply(control.counts, 1, mean)
```

```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[, treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
plot(meancounts)
```

This data is screaming at us to log transform

```{r}
plot(meancounts, log = "xy")
```

I want to compare the treated and the control values here and we will use fold change in log2 units to do this. log2(Treated/Control)

```{r}
log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
```

No difference
```{r}
log2(20/20)
```


A doubling in the treated:
```{r}
log2(20/10)
```

Downregulated
```{r}
log2(5/10)
```

Quadrulpe
```{r}
log2(40/10)
```

A common rule of thumb cut-off for calling a gene "differentially expressed" is a log2 fold change value of either >+2 or <-2 for "upregulated" and "downregulated" respectively.

```{r}
head(meancounts)
```

```{r}
#Not proper way b/c we need to remove NaN
sum(meancounts$log2fc > +2, na.rm = T)
```

We first need to remove zero count genes - as we can't say anything about these genes anyway and their division of log values are messing things up (divide by zero) or the -infinity log problem.

```{r}
#"TRUE"s are zero values
#meancounts[,1:2]==0
```

```{r}
to.rm.ind <- rowSums(meancounts[,1:2]==0) > 0
mycounts <- meancounts[!to.rm.ind, ]
```

> How many genes do we have left that we can say something about (i.e. they don't have any zero counts)?

```{r}
nrow(mycounts)
```

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

```{r}
sum(up.ind)
sum (down.ind)
```

> Q10.
No, we are missing stats!! Are these differences significant?

## DESeq analysis

Let's do this properly with the help of the DESeq2 package

```{r}
#| message: false

library(DESeq2)
```

We have to use a specific data onject for working with DESeq

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Run our main analysis with the `DESeq()` function
```{r}
dds <- DESeq(dds)
```
To get the results out of our `dds` object we can use the DESeq function called `results()`:

```{r}
res <- results(dds)
head(res)
```

## Volcano Plot

A very common and useful summary figure from this type of analysis is called a volcano plot - a plot of log2FC vs P-value. We use the `padj` the adjusted P-value for multiple testing

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

```{r}
# smaller p-value results in more extreme negative value
log(0.00005)
log(0.5)
```


```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```


