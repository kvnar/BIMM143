---
title: "Class 06: R Function"
author: "Kevyn Aguilar Ramirez (PID: A16321291)"
date: 01/25/24
format: pdf
editor: visual
---
## R Function

Functionas are how we get stuff done. We call functions to do everything useful in R.

One cool thing about R is that it makes writing your own functions comparatively easy.

All functions in R have at least three things:
- A **name** (we get to pick this)
- One of more **input argument** (the input to our function)
- The **body** (lines of code that do the work)

```{r}
#| eval: false

funname <- function(input 1, input 2) {
  The body with R code
}
```

Let's write a silly first function to add two numbers
```{r}
x <- 5
y <- 1
x+y
```

```{r my fun}
addme <- function(x,y=1) {
  x+y
}
```

```{r}
addme(100,100)
```

```{r}
addme (10)
```

## Lab for today

```{r}
#student 1
c(100, 100, 100, 100, 100, 100, 100, 90)

#student 2
c(100, NA, 90, 90, 90, 90, 97, 80)
```

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Let's just find the average.
```{r}
mean(student1)
mean(student2, na.rm = TRUE)
mean(student3, na.rm = TRUE)
```
This is not fair - there is no way student3 should have a mean of 90!

Come back to this NA problem. But things works for `student1`.
We want to drop the lowest score before getting the `mean()`

How do I find the lowest (minimum) score?
```{r}
min(student1)
```

I found the `which.min()` function. Maybe this is more useful?
```{r}
which.min(student1)
```

Cool - it is the 8th element of the vector that has the lowest score. Can I remove this one?
```{r}
student1[which.min(student1)]
```

We can use the wee minus trick for indexing.
```{r}
x <- 1:5
x[-3]
```

Now put these bits of code
```{r}
# Find the lowest score
ind <- which.min(student1)
# remove lowest score and find the mean
mean(student1[-ind])
```

```{r}
mean(student1[-which.min(student1)])
```

Use a common shortcut and use `x` as my input
```{r}
x <- student1
mean(x[-which.min(x)])
```

We still have a problem of missing values.

One idea is to replace NA values with zero.

```{r}
y <- 1:5
y[y == 3] <- 10000
y
```

Bummer, this is no good...
```{r}
y <- c(1, 2, NA, 4, 5)
y == NA
```

```{r}
y
is.na(y)
```

How can I remove the NA elements from the vector? I first need to flip the TRUE element.
```{r}
!c(F,F,F)
#y[is.na(y)]
```


```{r}
y[!is.na(y)]
```


```{r}
y[is.na(y)] <- 10000
y
```

Okay lets solve this:
```{r}
x <- student3

#Change NA values to ZERO
x[is.na(x)] <- 0
#find and remove min value and get mean
mean(x[-which.min(x)])
```

Last step now that I have my working code snippet is to make my `grade()` function.

```{r}
grade <- function(x) {
  #Change NA values to ZERO
  x[is.na(x)] <- 0
  #find and remove min value and get mean
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
grade <- function(x) {
  #Change NA values to ZERO
  x[is.na(x)] <- 0
  #find and remove min value and get mean
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Now read the online gradebook (CSV file)
```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names=1)

head(gradebook)
```

```{r}
results <- apply(gradebook,1,grade)
results
```
Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]
```{r}
which.max(results)
```

Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts]
```{r}

homework <- apply(gradebook, 2, sum, na.rm=T)
homework
```

```{r}
homework <- apply(gradebook, 2, sum, na.rm=T)
homework
which.min(homework)
```


Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
#Make all (or mask) NA to zero
mask <- gradebook
mask[is.na(mask)] <- 0
#mask
```

We can use `cor()` function for correlation analysis.
```{r}
cor(mask$hw1, results)
cor(mask$hw5, results)
cor(mask$hw3, results)
cor(mask$hw2, results)
cor(mask$hw4, results)
```

```{r}
apply(mask, 2, cor, results)

```


